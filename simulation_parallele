#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import os, sys
import argparse
import random
from itertools import chain
from shutil import copyfile
from os import chdir
import numpy as np


def get_parser():
	"""
	Parse arguments
	@return: arguments list
	@rtype: parser object
	"""

	parser = argparse.ArgumentParser(description='run reads analysis, variant analysis, assembly and annotation \
		from raw reads and add outputs in the GAMeR database')

	parser.add_argument('-minCov', action="store", dest='MINCOV',
						type=int, default=80, help='min coverage (default=80)')

	parser.add_argument('-maxCov', action="store", dest='MAXCOV',
						type=int, default=100, help='max coverage (default=100)')

	parser.add_argument('-minId', action="store", dest='MINID',
						type=int, default=80, help='min identity (default=80)')

	parser.add_argument('-maxId', action="store", dest='MAXID',
						type=int, default=100, help='max identity (default=100)')

	parser.add_argument('-i', action="store", dest='ITERATION',
						type=int, default=1 , help='iteration')

	parser.add_argument('-q', action="store", dest='QUERY',
						type=str, required=True, help='Query path (REQUIRED)')	

	parser.add_argument('-g', action="store", dest='GENOMES',
						type=str, required=True, help='genomes directory (REQUIRED)')

	parser.add_argument('--nucl', dest='NUCL', action='store_true', help='nucl')


	parser.add_argument('--noDrift', dest='NODRIFT', action='store_true', help='noDrift')


	parser.add_argument('-T', action="store", dest='nbThreads', 
						type=str, default='2', help='Number of threads to use\
						(default:2)')

	parser.add_argument('-t', action="store", dest='TpT', 
						type=str, default='1', help='Number of threads to use per job\
						(default:1)')

	parser.add_argument('-b', action="store", dest='BOOTSTRAP',
						type=int, default=1 , help='bootstrap (default:1)')

	parser.add_argument('-B', action="store", dest='BOOTSTRAP_FINAL',
						type=int, default=100 , help='bootstrap final for best parameters (default:100)')


	return parser



def run_bash_jobs(NAuRA_cmd, mv_cmd) :

	bash_script = open("NAuRA_sim.sh",'w')

	bash_script.write("#/bin/bash\n")

	for cmd in NAuRA_cmd :
		bash_script.write(cmd + '&\n')

	bash_script.write("wait\n")	

	for cmd in mv_cmd :
		bash_script.write(cmd + '\n')

	bash_script.close()

	os.system("chmod +x NAuRA_sim.sh")
	os.system("./NAuRA_sim.sh")
	os.remove("NAuRA_sim.sh")


class gene(object) :

	def __init__(self):

		self.name = None
		self.cov = 100
		self.id = 100
		self.nbAlleles = 1


class node(object) :
	"""
	Create node object to stock the phylogeny tree
	@param name : name of the genome
	@type name : string
	@param variants : list of var objects assigned to the genome 
	@type variants : list
	"""
	
	def __init__(self):
		"""
		Initialize the node class
		@param fils : list of sons nodes objects
		@type fils : list
		@param pere : father node object 
		@type pere : node object
		@param val : genome name if the node is a leaf
		@type val : string
		"""
		self.fils = []
		self.pere = None
		self.val = None

	def nbFils(self):
		"""
		Compute number of sons
		@return: number of sons
		@rtype: integer
		"""
		return len(self.fils)

	def isLeaf(self):
		"""
		Check if the node is a leaf
		@return: True if the node is a leaf, False otherwise
		@rtype: boolean
		"""
		if len(self.fils)==0:
			return True
		else:
			return False	

	def setPere(self, node):
		"""
		Set the father node of the current node object
		@param node : father node object 
		@type node : node object
		"""
		self.pere = node

	def setFils(self, node):
		"""
		Add a new son to the current node object
		@param node : son node object 
		@type node : node object
		"""
		self.fils.append(node)

	def setVal(self, val):
		"""
		Set the genome name of the node
		@param val : genome name
		@type val : string
		"""
		self.val = val	
				
	def listLeaf(self, liste):
		"""
		Give all genomes name of all sons node objects (recursive function)
		@param liste : empty list which will contain genomes name
		@type liste : list
		"""
		for node in self.fils :
			if node.isLeaf() :
				liste.append(node.val)
			else :
				node.listLeaf(liste)


def createNode():
	"""
	Create a new empty node object
	@return: empty node object
	@rtype: node object
	"""
	root = node()
	return root


def readTree(file):
	"""
	Read a newick file and stock informations in a node object
	@param file : newick file name
	@type file : string
	@return: root of the phylogeny tree
	@rtype: node object
	"""

	with open(file, 'rb') as newickFile:

		line = newickFile.readlines()[0]
		firstNode = True
		leafVal = ""

		for character in line :

			if character == '(': 
			# start a new node
				if firstNode :
					# if it's the first node, create the root
					root = createNode() 
					node_actuel = root
					firstNode = False
					isLeaf = True

				else :
					new_node = createNode()	
					
					# make the relationship between son and father
					new_node.setPere(node_actuel) 
					node_actuel.setFils(new_node)

					node_actuel = new_node
					isLeaf = True

			elif isLeaf and character != ':':
				# start of a genome name
				leafVal = leafVal + character

			elif character == ':' and len(leafVal)>0:
				# end of a branch, start of a genome name --> set it as a node value
				isLeaf = False
				leaf = createNode()
				leaf.setVal(leafVal)

				# make the relationship between son and father
				leaf.setPere(node_actuel)
				node_actuel.setFils(leaf)
				
				leafVal = ""

			elif character == ',':
				isLeaf = True	

			elif character == ')':
				# end of node, back to parent node
				node_actuel = node_actuel.pere						


		return root


def allNodesLeafs(node, liste):
	"""
	For a given node, stock all its descendants name in a list (recursive function)
	@param node : node object which descendants names will be found
	@type node : node object 
	@param liste : empty liste that will contain genomes name
	@type liste : list
	"""

	if node.isLeaf() :
		liste.append(node.val)

	else:	

		l = []
		node.listLeaf(l)
		liste.append(l)

		for n in node.fils :
			allNodesLeafs(n, liste)


def MonoPhy(tree):

	root = readTree(tree)	
	genesNames = []
	root.listLeaf(genesNames)

	dicoMonoPhy = {}
	dicoGenesAlleles = {}

	for element in genesNames :

		geneName = '_'.join(element.split('_')[0:-1])

		if geneName not in dicoMonoPhy :
			dicoMonoPhy[geneName] = False
			dicoGenesAlleles[geneName] = 1

		else :
			dicoGenesAlleles[geneName] += 1	

	#pour gène ou nb allèle = 1 --> toujours monophylétique		
	for geneName in dicoMonoPhy :
		if dicoGenesAlleles[geneName] == 1 :
			dicoMonoPhy[geneName] = True

	#print dicoGenesAlleles	
	#print dicoMonoPhy

	browseTree(root, dicoMonoPhy, dicoGenesAlleles)

	for element in dicoMonoPhy :
		if not dicoMonoPhy[element] :
			return False

	return True


def browseTree(nodeObj, dicoMonoPhy, dicoGenesAlleles):

	genesNames = []
	nodeObj.listLeaf(genesNames)

	if len(genesNames) > 1 :

		#print genesNames
		MonoPhy_test(genesNames, dicoMonoPhy, dicoGenesAlleles)

		for node in nodeObj.fils :
			browseTree(node, dicoMonoPhy, dicoGenesAlleles)


def MonoPhy_test(genesNames_list, dicoMonoPhy, dicoGenesAlleles):	
	
	first_geneName = '_'.join(genesNames_list[0].split('_')[0:-1])

	nb_geneName = 0

	for element in genesNames_list :

		#print element

		if '_'.join(element.split('_')[0:-1]) == first_geneName :
			nb_geneName += 1

		else :
			return

	#print nb_geneName		

	if nb_geneName == dicoGenesAlleles[first_geneName] :
		dicoMonoPhy[first_geneName] = True		
	


def makeGenesObject(queries_filename):

	GenesObject_list = []
	
	queries_file = open(queries_filename, 'r')
	lines = queries_file.readlines()
	queries_file.close()

	for line in lines :
		line = line.rstrip()
		geneObj = gene()
		geneObj.cov = line.split('\t')[1]
		geneObj.id = line.split('\t')[2]

		genePath = line.split('\t')[0]
		geneObj.name = genePath.split('/')[-1].replace(".fasta",'')

		geneObj.nbAlleles = nbSequence_in_fasta(genePath)

		GenesObject_list.append(geneObj)

	return GenesObject_list	


def nbSequence_in_fasta(fasta_path):

	fasta_file = open(fasta_path,'r')
	lines = fasta_file.readlines()
	fasta_file.close()

	nbSequence = 0

	for line in lines :	
		if line[0] == '>' :
			nbSequence += 1

	return nbSequence		


def quantiles(dico_genesDistribution):

	dico_quantiles = {}

	for gene in dico_genesDistribution :

		dico_quantiles[gene] = []
		dico_quantiles[gene].append(int(round(np.percentile(dico_genesDistribution[gene],25))))
		dico_quantiles[gene].append(int(round(np.percentile(dico_genesDistribution[gene],75))))

	return dico_quantiles	


def bestSim_otherwise(dico_quantiles, dico_genesObj):

	dico_simulation_score = {}

	for simulation in dico_genesObj :

		dico_simulation_score[simulation] = 0

		for geneObj in dico_genesObj[simulation]:
			if (geneObj.nbAlleles > dico_quantiles[geneObj.name][0]) and (geneObj.nbAlleles < dico_quantiles[geneObj.name][1]) :
				dico_simulation_score[simulation] += 1

	max_score = 0
	for simulation in dico_simulation_score :
		if	dico_simulation_score[simulation] >	max_score :
			max_score = dico_simulation_score[simulation]

	best_sim = []
	for simulation in dico_simulation_score :
		if 	dico_simulation_score[simulation] == max_score :
			best_sim.append(simulation)

	return random.choice(best_sim)			


def queries_final_phylogeny(seqType, alignment_file, bootstrap, prefix):
	#

	chdir("FINAL")

	#phylogeny
	command = "pairdist -b -i " + alignment_file + " -n " + bootstrap
	if seqType == "PROT" :
		command = command + " -p"
	os.system(command)
	newick = '.'.join(alignment_file.split('.')[0:-1]) + ".tree"
	os.system("mv " + alignment_file + ".tree " + newick)

	#transform newick
	os.system("sed -i '/begin trees;/d' " + newick)
	os.system("sed -i '/end;/d' " + newick)
	os.system("sed -i 's/tree pdtree[0-9]* = //g' " + newick)
	os.system("sed -i 's/;;/;/g' " + newick)

	#Best tree
	command = "sumtrees.py -F newick --root-target-at-midpoint --summary-target=consensus \
	--suppress-annotations --decimals=0 --percentages " + newick + \
	" > " + prefix + "_queries_alignment.consensus.tree"
	os.system(command)

	os.system("sed -i 's/\[&R\] //g' " + prefix + "_queries_alignment.consensus.tree")



#main function	
def main():	


	##########################################
	#			Initialisation				 #
	##########################################

	
	# Get arguments 
	parser=get_parser()
	
	# Print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	Arguments=parser.parse_args()

	if int(Arguments.TpT) > int(Arguments.nbThreads) :
		Arguments.TpT = Arguments.nbThreads
	'''	
	query_file = open(Arguments.QUERY,'r')
	lines = query_file.readlines()
	query_file.close()

	Nb_thread_use = 0
	mv_cmd = []
	NAuRA_cmd = []
	flag = False
	
	for i in range(1,Arguments.ITERATION+1):

		simId = "sim" + str(i)

		os.makedirs(simId)

		query_sim = simId + '/' + Arguments.QUERY.split('/')[-1]
		query_sim_outfile = open(query_sim,'w')

		os.makedirs(simId + '/query')

		# genere query filtre aléatoire

		for line in lines :

			if(len(line)>1):
				
				line = line.rstrip()
				line = line.split('\t')[0]

				query_name = line.split('/')[-1]
				new_query_path = simId + '/query/' + query_name
				copyfile(line, new_query_path)

				coverage = random.randint(Arguments.MINCOV,Arguments.MAXCOV)
				identity = random.randint(Arguments.MINID,Arguments.MAXID)

				query_sim_outfile.write(new_query_path + '\t' + str(coverage) + '\t' + str(identity) + '\n')

		query_sim_outfile.close()

		# lancer Naura

		cmd = "NAuRA -i " + Arguments.GENOMES + " -q " + query_sim + " --withPhylo " + " -T " + str(Arguments.TpT) \
		+ ' -b ' + str(Arguments.BOOTSTRAP) + " -o " + str(simId) + " -l " + str(simId) + "_list.txt -m " + str(simId) + "_matrix.tsv "
		if Arguments.NUCL : 
			cmd = cmd + " --nucl "
		if Arguments.NODRIFT : 
			cmd = cmd + " --noDrift "	

		NAuRA_cmd.append(cmd)	

		mv_cmd.append("mv " + simId + "_list.txt " + simId + "/.")	
		mv_cmd.append("mv " + simId + "_matrix.tsv " + simId + "/.")
		mv_cmd.append("mv " + simId + "_queries_alignment.consensus.tree " + simId + "/.")
		mv_cmd.append("mv " + simId + "_queries_alignment.fasta " + simId + "/.")
		mv_cmd.append("mv " + simId + "_queries_alignment.tree " + simId + "/.")

		Nb_thread_use += int(Arguments.TpT)
		flag = True

		if(Nb_thread_use + int(Arguments.TpT) >= int(Arguments.nbThreads)) :

			run_bash_jobs(NAuRA_cmd, mv_cmd)
			Nb_thread_use = 0
			mv_cmd = []
			NAuRA_cmd = []
			flag = False

	if flag :
		run_bash_jobs(NAuRA_cmd, mv_cmd)		

	
	'''
	'''
	sim_monophy_list = []
	sim_not_monophy_list = []

	for nSim in range(1,Arguments.ITERATION+1) :

		tree = "sim" + str(nSim) + "/sim" + str(nSim) + "_queries_alignment.consensus.tree"	
		is_monoPhy = MonoPhy(tree)

		if is_monoPhy :
			sim_monophy_list.append(nSim)

		else :
			sim_not_monophy_list.append(nSim)


	print "monophyletic simulation : " + ''.join(str(sim_monophy_list))
	print "no monophyletic simulation : " + ''.join(str(sim_not_monophy_list))			

	if len(sim_monophy_list) == 0 :
		print "ERROR : no monophyletic simulation"
		sys.exit(1)


	dico_genesObj = {}	
	dico_genesDistribution = {}
	first_sim = True

	#for test
	#sim_monophy_list = sim_not_monophy_list


	for sim_monophy in sim_monophy_list :

		GenesObject_list = makeGenesObject("sim" + str(sim_monophy) + '/' + \
			Arguments.QUERY.split('/')[-1])

		dico_genesObj[sim_monophy] = GenesObject_list

		if first_sim :
			first_sim = False
			for element in GenesObject_list :
				dico_genesDistribution[element.name] = []

		for element in GenesObject_list :		
			dico_genesDistribution[element.name].append(element.nbAlleles)

	#print dico_genesDistribution			

	dico_quantiles = quantiles(dico_genesDistribution)
	#print dico_quantiles

	best_sim = []
	for simulation in dico_genesObj :
		keep_sim = True	
		for geneObj in dico_genesObj[simulation]:
			if (geneObj.nbAlleles < dico_quantiles[geneObj.name][0]) or (geneObj.nbAlleles > dico_quantiles[geneObj.name][1]) :
				keep_sim = False
		if keep_sim :
			best_sim.append(simulation)	

	print "Best simulation(s) : " + ''.join(str(best_sim))				


	if len(best_sim) == 0 :	
		best_sim = bestSim_otherwise(dico_quantiles, dico_genesObj)

	else :	
		best_sim = random.choice(best_sim)
	
	print "Simulation selected : " + str(best_sim)

	genesObj = dico_genesObj[best_sim]

	os.makedirs("all_simulation")
	os.system("mv sim* all_simulation/.")
	os.makedirs("FINAL")
	os.system("cp -r all_simulation/sim" + str(best_sim) + '/* FINAL/.')

	'''
	best_sim = 1307

	if Arguments.NUCL : 
		seqType = "NUCL"
	else :
		seqType = "PROT"
	alignment_file = "sim" + str(best_sim) + "_queries_alignment.fasta"		
	#queries_final_phylogeny(seqType, alignment_file, Arguments.BOOTSTRAP_FINAL, "FINAL")

	#'''




if __name__ == "__main__":
	main()	        	

	'''	

	query_file = open(Arguments.QUERY,'r')
	lines = query_file.readlines()
	query_file.close()
	query_final = "FINAL/FINAL_query.tsv"
	query_sim_outfile = open(query_final,'w')

	for line in lines :

		if(len(line)>1):
				
			line = line.rstrip()
			line = line.split('\t')[0]

			query_name = line.split('/')[-1]
			new_query_path = 'FINAL/query/' + query_name
			
			copyfile(line, new_query_path)

			for geneObj in genesObj :
				if geneObj.name == query_name :
					cov = geneObj.cov
					id = geneObj.id
					break

			query_sim_outfile.write(new_query_path + '\t' + str(cov) + '\t' + str(id) + '\n')

	query_sim_outfile.close()


	# lancer Naura

	cmd = "NAuRA -i " + Arguments.GENOMES + " -q " + query_final + " --withPhylo " + " -T " + str(Arguments.nbThreads) \
	+ ' -b ' + str(Arguments.BOOTSTRAP_FINAL) + " -o FINAL -l FINAL_list.txt -m FINAL_matrix.tsv "
	if Arguments.NUCL : 
		cmd = cmd + " --nucl "
	if Arguments.NODRIFT : 
		cmd = cmd + " --noDrift "

	os.system(cmd)
	os.system("mv FINAL_list.txt FINAL/.")	
	os.system("mv FINAL_matrix.tsv FINAL/.")
	os.system("mv FINAL_queries_alignment.consensus.tree FINAL/.")
	os.system("mv FINAL_queries_alignment.fasta FINAL/.")
	os.system("mv FINAL_queries_alignment.tree FINAL/.")	

	'''